usethis::use_r("zmy")
use_package("readxl")
use_package("readxl")
usethis::use_package("readxl")
devtools::load_all()
na_process(data = iris)
usethis::use_mit_license()
devtools::check()
devtools::load_all()
pre_plot(data=mtcars)
View(args)
devtools::load_all()
pre_plot(data=iris)
devtools::load_all()
pre_plot(data=iris)
pre_plot(data=iris)
devtools::load_all()
pre_plot(data = iris)
devtools::load_all()
pre_plot(data=iris)
devtools::load_all()
pre_plot(data=iris)
pre_plot(data=mtcars)
head(mtcars)
str(mtcars)
str(iris)
devtools::load_all()
pre_plot(data=iris)
data <- read.csv("D:/fetal/fetal2/20220801/fetal2022.xlsx")
data <- readxl::read_excel("D:/fetal/fetal2/20220801/fetal2022.xlsx")
data("data/20230317_new_rawdata.Rdata")
data("20230317_new_rawdata.Rdata")
devtools::load_all()
data("data/20230317_new_rawdata.Rdata")
data <- read.csv("D:/fetal/fetal2/20220801/20230810.csv")
devtools::use_data(data)
usethis::use_data(data)
devtools::load_all()
pre_plot(data = data)
data("data")
data("data")
devtools::load_all()
pre_plot(data = data)
devtools::load_all()
pre_plot(data=data)
devtools::load_all()
pre_plot(data = data)
1:ncol(data)
is.numeric(data[,2])
is.numeric(data[,4])
devtools::load_all()
pre_plot(data = data)
devtools::load_all()
pre_plot(data = data)
devtools::load_all()
pre_plot(data = data)
devtools::load_all()
pre_plot(data=mtcars)
devtools::load_all()
pre_plot(data = data)
data("data")
pre_plot(data = data)
is.na(data)
table(is.na(data))
usethis::use_package("tidyverse")
usethis::use_package("tidyverse",type = "depends")
usethis::use_package("purrr")
usethis::use_package("ggplot2")
devtools::load_all()
num_nonorm_plot(num = iris[,1:3],group = iris$Species)
iris$Species
group <- iris$Species
group
data <- iris
rownames(iris) <- paste0("sample","_",1:150)
View(data)
rownames(data) <- paste0("sample","_",1:150)
View(data)
group <- data$Species
group
num_nonorm_plot(num = data[,1:3],group = group)
num <- data[,1:3]
View(num)
num_nonorm_plot(num = num,
group = group)
usethis::use_package("tibble")
devtools::load_all()
data <- iris
rownames(data) <- paste0("sample","_",1:150)
group <- data$Species
num <- data[,1:4]
num_plot(num = num,)
num_plot(num = num,group = group)
devtools::load_all()
usethis::use_package("plyr")
use_readme_rmd()
devtools::check()
importFrom("stats", "IQR", "chisq.test", "ks.test", "na.omit",
"quantile")
use_readme_rmd()
usethis::use_readme_md()
build_readme()
devtools::build_readme()
devtools::build_readme()
rlang::last_trace()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::build()
usethis::use_r("machine_learning")
usethis::use_package("MLmetrics")
usethis::use_package("randomForest")
devtools::load_all()
devtools::load_all()
data <- data
View(data)
table(is.na(data))
colnames(data)[2] <- "y"
table(data$y)
data$y <- as.character(data$y)
data$y[data$y==">4"] <- "5"
data$y <- factor(data$y,levels = c("0","1","2","3","4","5"))
machine_learning(data = data,cv_k = 5)
devtools::load_all()
machine_learning(data,5)
devtools::load_all()
machine_learning <- function(data,cv_k){
#设置训练集和验证集抽取方式
library(randomForest)
library(MLmetrics)
add_cv_cohort <- function(dat,cv_k){
if(nrow(dat)%%cv_k==0){
dat$cv_cohort <- sample(rep(1:cv_k,each=nrow(dat)%/%cv_k))
}else{
dat$cv_cohort <- sample(c(rep(1:(nrow(dat)%%cv_k),each=nrow(dat)%/%cv_k+1),
rep((nrow(dat)%%cv_k+1):cv_k,each=nrow(dat)%/%cv_k)))
}
return(dat)
}
if(is.numeric(data$y)==TRUE){
}else{
machinedata_cv <- add_cv_cohort(data,cv_k)
rf.grid <- expand.grid(nt = seq(100, 500, by = 100),
mrty = c(1, 2, 3, 4, 5))
rf.grid$acc <- rf.grid$f1 <- NA
rf.f1 <- rf.acc <- c()
set.seed(1234)
for (k in 1:nrow(rf.grid)) {
for (i in 1:5) {
indexs <- which(machinedata_cv$cv_cohort==i)
train <- machinedata_cv[-indexs,]
test <- machinedata_cv[indexs,]
train <- train[,-ncol(train)]
test <- test[,-ncol(test)]
########model
rf.model <- randomForest(y~., data = train,
n.trees = rf.grid$nt[k],
mtry = rf.grid$mrty[k])
rf.pred <- predict(rf.model, test)
# evaluate
rf.f1[i] <- F1_Score(test$y, rf.pred)
rf.acc[i] <- sum(rf.pred == test$y)/nrow(test)
}
rf.grid$f1[k] <- mean(rf.f1)
rf.grid$acc[k] <- mean(rf.acc)
print(paste("finished with:", k))
}
ntree <- rf.grid$nt[which.max(rf.grid$acc)]
mtry <- rf.grid$mrty[which.max(rf.grid$acc)]
###############
####按照最佳参数进行交叉验证
risk_factor <- list()
train_f1 <- train_acc <- c()
test_f1 <- test_acc <- c()
par(mfcol=c(2,5),mar=c(1,1,1,1))
p <- for (i in 1:5) {
indexs <- which(machinedata_cv$cv_cohort==i)
train <- machinedata_cv[-indexs,]
test <- machinedata_cv[indexs,]
train <- train[,-ncol(train)]
test <- test[,-ncol(test)]
########model
model <- randomForest(y~.,
data = train,
n.trees = ntree,
mtry = mtry)
varImpPlot(model,main=paste0("cross validation"," ",i),
lwd=2,cex.main=1.2,
cex.axis=1.2,cex.lab=1.2)
importance <- as.data.frame(model$importance)
importance$MeanDecreaseGini <- importance$MeanDecreaseGini[order(importance$MeanDecreaseGini,
decreasing = T)]
risk_factor[[i]] <- rownames(importance)[1:6]
pred1 <- predict(model,train)
pred1
plot(roc(as.numeric(pred1),
as.numeric(train$y)),
col="red",lwd=2,cex.main=1.2,
cex.axis=1.2,cex.lab=1.2)
lr.auc <- auc(roc(as.numeric(pred1),
as.numeric(train$y)))
text(0.3, 0.4, labels=paste('AUC=', round(lr.auc, 3), sep=''), cex=1.5,col="red")
##########测试集
pred2 <- predict(model,test)
plot(roc(as.numeric(pred2),
as.numeric(test$y)),
col="blue",lwd=2,cex.main=1.2,
cex.axis=1.2,cex.lab=1.2,add=TRUE)
lr.auc <- auc(roc(as.numeric(pred2),
as.numeric(test$y)))
text(0.3, 0.2, labels=paste('AUC=', round(lr.auc, 3), sep=''), cex=1.5,col="blue")
train_f1[i] <- F1_Score(train$y, pred1)
train_acc[i] <- sum(pred1 == train$y)/nrow(train)
test_f1[i] <- F1_Score(test$y, pred2)
test_acc[i] <- sum(pred2 == test$y)/nrow(test)
}
}
risk_factor
}
rm(machine_learning())
rm("machine_learning")
machine_learning(data,5)
usethis::use_package("pROC")
machine_learning(data,5)
devtools::load_all()
.libPaths()
lapply(.libPaths(), dir())
lapply(.libPaths(), dir)
devtools::load_all()
##########
#.3.2 类别型变量作图
vec_plot <- function(vec,group,
colors = c("#2874C5","#f87669","#e6b707","#868686",
"#66C2A5","#FC8D62","#8DA0CB","#E78AC3",
"#A6D854","#FFD92F","#E5C494","#B3B3B3")){
vec$group <- group
p <- list()
for (i in 1:(ncol(vec)-1)) {
a <- data.frame(table(vec[,i],vec[,ncol(vec)]))
b <- table(vec[,i],vec[,ncol(vec)])
a <- ddply(a,.(Var2),transform,percent=Freq/sum(Freq)*100)
a$label = paste0(sprintf("%.1f", a$percent), "%")
pvalue <- chisq.test(b)$p.value #卡方检验
xsquared <- chisq.test(b)$statistic
p[[i]] <- ggplot(a,aes(Var2,percent,fill=Var1))+
geom_bar(stat="identity",position = position_stack())+
scale_fill_manual(values = colors[1:length(levels(a$Var1))])+
scale_y_continuous(labels = scales::percent_format(scale = 1))+ #百分比y轴
labs(x="Number of transfusion",
y="Percent Weidght",
fill=colnames(vec)[i])+
annotate(geom = "text",
cex=5,
x=1.5, y=105, # 根据自己的数据调节p value的位置
label=paste0("P ", ifelse(pvalue<2.2e-16, "<2.2e-16", paste0("= ",round(pvalue,4))),
'x-squared =',paste0(round(xsquared,1))), # 添加P值
color="black")+
theme_classic()+
theme(legend.position = "top",
legend.text = element_text(size=12),
axis.text = element_text(size=12),
axis.title = element_text(size=12))
}
if(ncol(vec)<=8){
p <- wrap_plots(p,ncol = 4)
ggsave(p,device = "png",
units = "cm",
width = 16,
dpi = 600,
file="./test.png")
}else if(ncol(vec)>=9 &ncol(vec)<=25){
p <- wrap_plots(p,ncol = 5)
ggsave(p,device = "png",
units = "cm",
width = 100,
height = 100,
dpi = 600,
file="./test.png")
}else{
p <- wrap_plots(p,ncol = 6)
ggsave(p,device = "png",
units = "cm",
width = 150,
height = 150,
dpi = 600,
file="./test.png")
}
}
vec_plot(vec=mtcars,mtcars$vs)
library(plyr)
vec_plot(vec=mtcars,mtcars$vs)
library(ggplot2)
vec_plot(vec=mtcars,mtcars$vs)
mtcars
str(mtcars)
devtools::load_all()
devtools::load_all()
machine_learning(data = iris)
machine_learning(data = iris,cv_k = 4)
devtools::load_all()
machine_learning(iris,4)
dat <- iris
colnames(dat)[5] <- "y"
machine_learning(dat,4)
usethis::use_package("randomForest",type = "Depends")
yes
devtools::load_all()
usethis::use_package("MLmetrics",type = "Depends")
devtools::load_all()
machine_learning(dat,4)
usethis::use_package("pROC",type = "Depends")
devtools::load_all()
dat <- iris
colnames(dat)[5] <- "y"
machine_learning(dat,4)
na_process(data = iris)
dat <- na_process(iris)
dat <- outlier(dat)
dat <- outlier_process(data = iris)
dat$Species <- as.character(dat$Species)
outlier_process(data = dat)
is.factor(iris$Species)
num_plot(iris[,1:4],group = iris[,5])
mtcars
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
devtools::load_all()
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
usethis::use_package("plyr",type = "Depends")
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
usethis::use_package("plyr",type = "Imports")
devtools::load_all()
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
usethis::use_package("patchwork")
devtools::load_all()
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
devtools::load_all()
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
devtools::load_all()
vec_plot(vec = mtcars[,-ncol(mtcars)],group = mtcars[,ncol(mtcars)])
ncol(mtcars)
devtools::load_all()
rf_analysis(data = dat,cv_k = 4)
colnames(dat)[5] <- "y"
rf_analysis(data = dat,cv_k = 4)
devtools::load_all()
dat <- iris
dat <- iris
devtools::load_all()
dat <- iris
colnames(dat)[5] <- "y"
rf_analysis(data = dat,cv_k = 4)
devtools::load_all()
data <- MASS::Boston
colnames(data)[ncol(data)] <- "y"
glmnet_analysis(data = data,cv_k = 4)
usethis::use_package("glmnet")
glmnet_analysis(data = data,cv_k = 4)
usethis::use_package("glmnet",type = "Depends")
glmnet_analysis(data = data,cv_k = 4)
devtools::load_all()
glmnet_analysis(data = data,cv_k = 4)
usethis::use_package("caret")
devtools::load_all()
glmnet_analysis(data = data,cv_k = 4)
usethis::use_package("caret",type = "Depends")
devtools::load_all()
glmnet_analysis(data = data,cv_k = 4)
devtools::load_all()
devtools::check()
devtools::check()
outlier_process(iris)
iris
devtools::load_all()
devtools::check()
devtools::check()
roxygen2::roxygenize()
devtools::document()
use_readme_rmd()
usethis::use_readme_rmd()
build_readme()
devtools::build_readme()
devtools::build()
library(zmy)
echo "# R_package_zmy" >> README.md
